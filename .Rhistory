residual_mean_square <- summary(anova_model_2)$'Residuals'$'Mean Sq'
pooled_sd <- sqrt(residual_mean_square)
# Calculate the pooled standard deviation from the ANOVA model
residual_mean_square <- summary(anova_model_2)$'Residuals'$'Mean Sq'
pooled_sd <- sqrt(residual_mean_square)
# Extract the Residuals Mean Square from the ANOVA model
residuals_summary <- summary(anova_model_2)
residual_mean_square <- residuals_summary[["Residuals"]][["Mean Sq"]]
# Calculate the pooled standard deviation
pooled_sd <- sqrt(residual_mean_square)
# Extract the residuals from the ANOVA model
residuals_anova <- anova_model_2$residuals
# Calculate the pooled standard deviation
pooled_sd <- sqrt(sum(residuals_anova^2) / anova_model_2$df.residual)
# Extract the differences from Tukey's HSD test
tukey_results <- TukeyHSD(anova_model_2, "Source")
diffs <- tukey_results$Source[, "diff"]
# Calculate effect sizes (Cohen's d)
effect_sizes <- diffs / pooled_sd
# Print effect sizes
print(effect_sizes)
pnorm(8.98)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
# weather <- read.csv("/Users/tgr/Downloads/weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# clean data
clean_weather <- weather %>% na.omit()
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
install.packages("dplyr")
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
install.packages("mass")
install.packages("MASS")
# front-matter
rm(list = ls()) # clear the workspace
packages.install("MASS")
# front-matter
rm(list = ls()) # clear the workspace
install.packages("MASS")
library(Stat2Data)
library(tidyverse)
library(mosaic)
# front-matter
rm(list = ls()) # clear the workspace
install.packages("MASS")
library(MASS)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
#library(mosaic)
library(ggformula)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
#library(mosaic)
#library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
knitr::opts_chunk$set(echo = F)
# weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
weather <- read.csv("/Users/tgr/Downloads/weatherAUS.csv", header = TRUE)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
#library(mosaic)
#library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
knitr::opts_chunk$set(echo = F)
weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
# weather <- read.csv("/Users/tgr/Downloads/weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
weather <- read.csv("./weatherAUS.csv", header = TRUE)
# weather <- read.csv("/Users/tgr/Downloads/weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# front-matter
rm(list = ls()) # clear the workspace
library(MASS)
# front-matter
rm(list = ls()) # clear the workspace
install
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
#library(mosaic)
#library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
knitr::opts_chunk$set(echo = F)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
# front-matter
rm(list = ls()) # clear the workspace
install.packages("MASS")
library(Stat2Data)
library(tidyverse)
library(mosaic)
# front-matter
rm(list = ls()) # clear the workspace
install.packages("MASS")
library(Stat2Data)
library(tidyverse)
library(mosaic)
# front-matter
rm(list = ls()) # clear the workspace
install.packages("MASS")
library(Stat2Data)
library(tidyverse)
library(mosaic)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
# front-matter
rm(list = ls()) # clear the workspace
chooseCRANmirror(graphics=FALSE, ind=1)  # Choose a mirror
install.packages("MASS")
library(Stat2Data)
library(tidyverse)
library(mosaic)
# front-matter
rm(list = ls()) # clear the workspace
install.packages("MASS")
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(ggplot2)
knitr::opts_chunk$set(echo = F)
weatherAUS <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv")
head(weatherAUS)
clean_weatherAUS <- weatherAUS %>%
select(RainToday, RainTomorrow) %>%
na.omit()
lr_model <- glm(factor(RainTomorrow) ~ factor(RainToday), family = binomial(link = "logit"), data = clean_weatherAUS)
anova(lr_model)
summary(lr_model)
library(ggplot2)
# Create a bar chart with proportions
ggplot(clean_weatherAUS, aes(x = RainToday, fill = RainTomorrow)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Proportion of Rain Tomorrow by Rain Today")
library(vcd)
# Create a mosaic plot
mosaic(~ RainToday + RainTomorrow, data = clean_weatherAUS, shade = TRUE, legend = TRUE)
library(ggplot2)
# Create a bar chart with proportions
ggplot(clean_weatherAUS, aes(x = RainToday, fill = RainTomorrow)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Proportion of Rain Tomorrow by Rain Today")
library(vcd)
# Create a mosaic plot
mosaic(~ RainToday + RainTomorrow, data = clean_weatherAUS, shade = TRUE, legend = TRUE)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
install.packages("leaps")
library(leaps)
library(dplyr)
knitr::opts_chunk$set(echo = F)
weather <- read.csv("./weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
weather <- read.csv("./weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# clean data
clean_weather <- weather %>% na.omit()
# model
lr_model <- glm(RainTomorrow ~ RainToday, family = binomial(link = "logit"), data = clean_weather)
ggplot(clean_weather, aes(x = RainToday, fill = RainTomorrow)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Proportion of Rain Tomorrow by Rain Today")
mosaic(~ RainToday + RainTomorrow, data = clean_weather, shade = TRUE, legend = TRUE)
emplogitplot1(as.numeric(RainTomorrow) ~ as.numeric(RainToday), data = clean_weather, ngroups = "all")
# clean data
clean_weather2 <- clean_weather
clean_weather2$Location <- factor(clean_weather2$Location)
# adding indicators
clean_weather$IndLoc <- ifelse(clean_weather$Location == "Sydney", 1, 0)
clean_weather$IndWindGustDir <- ifelse(clean_weather$WindGustDir == "W", 1, 0)
clean_weather$IndWindDir9am <- ifelse(clean_weather$WindDir9am == "W", 1, 0)
clean_weather$IndWindDir3pm <- ifelse(clean_weather$WindDir3pm == "WNW", 1, 0)
# performing stepwise and creating BIC
none <- lm(RainTomorrow ~ 1, data = clean_weather)
full_model <- lm(RainTomorrow ~ ., data = clean_weather)
# step(none, scope = list(upper = full_model), direction = "forward", really.big = T)
all <- regsubsets(RainTomorrow ~ . - Location - WindGustDir - WindDir9am - WindDir3pm, data = clean_weather, nbest = 1, really.big = TRUE)
plot(all, scale = "bic")
summaryHH(all)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(HH)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
install.packages("HH")
library(HH)
library(dplyr)
knitr::opts_chunk$set(echo = F)
weather <- read.csv("./weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# clean data
clean_weather <- weather %>% na.omit()
# model
lr_model <- glm(RainTomorrow ~ RainToday, family = binomial(link = "logit"), data = clean_weather)
ggplot(clean_weather, aes(x = RainToday, fill = RainTomorrow)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Proportion of Rain Tomorrow by Rain Today")
mosaic(~ RainToday + RainTomorrow, data = clean_weather, shade = TRUE, legend = TRUE)
emplogitplot1(as.numeric(RainTomorrow) ~ as.numeric(RainToday), data = clean_weather, ngroups = "all")
# clean data
clean_weather2 <- clean_weather
clean_weather2$Location <- factor(clean_weather2$Location)
# adding indicators
clean_weather$IndLoc <- ifelse(clean_weather$Location == "Sydney", 1, 0)
clean_weather$IndWindGustDir <- ifelse(clean_weather$WindGustDir == "W", 1, 0)
clean_weather$IndWindDir9am <- ifelse(clean_weather$WindDir9am == "W", 1, 0)
clean_weather$IndWindDir3pm <- ifelse(clean_weather$WindDir3pm == "WNW", 1, 0)
# performing stepwise and creating BIC
none <- lm(RainTomorrow ~ 1, data = clean_weather)
full_model <- lm(RainTomorrow ~ ., data = clean_weather)
# step(none, scope = list(upper = full_model), direction = "forward", really.big = T)
all <- regsubsets(RainTomorrow ~ . - Location - WindGustDir - WindDir9am - WindDir3pm, data = clean_weather, nbest = 1, really.big = TRUE)
plot(all, scale = "bic")
summaryHH(all)
# create model based on BIC
myModel <- glm(RainTomorrow ~ Sunshine + WindGustSpeed + WindSpeed3pm + Humidity3pm + Pressure3pm + RainToday, family = "binomial", data = clean_weather)
summary(myModel)
# plot model
emplogitplot1(RainTomorrow ~ Sunshine + WindGustSpeed + WindSpeed3pm + Humidity3pm + Pressure3pm + RainToday, data = clean_weather, ngroups = "all")
predicted <- predict(myModel, newdata = clean_weather, type = "response")
cleanWeather3 <- weather %>% na.omit()
SydneyWeather <- cleanWeather3 %>% filter(Location == "Sydney")
MelbourneWeather <- cleanWeather3 %>% filter(Location == "Melbourne")
gf_bar(~ RainToday | Location, data = SydneyWeather, fill = ~RainTomorrow, position = position_dodge())
gf_bar(~ RainToday | Location, data = MelbourneWeather, fill = ~RainTomorrow, position = position_dodge())
model_sydney <- glm(RainTomorrow ~ RainToday, family = binomial(link = "logit"), data = SydneyWeather)
model_melbourne <- glm(RainTomorrow ~ RainToday, family = binomial(link = "logit"), data = MelbourneWeather)
summary(model_sydney)
summary(model_melbourne)
plot(model_sydney, which = 1)
plot(model_melbourne, which = 1)
emplogitplot1(as.numeric(RainTomorrow) ~ as.numeric(RainToday), data = SydneyWeather, ngroups = "all")
emplogitplot1(as.numeric(RainTomorrow) ~ as.numeric(RainToday), data = MelbourneWeather, ngroups = "all")
# Data cleaning
weather_cleaned_sydney <- weather %>%
dplyr::select(-c(WindGustDir, WindDir9am, WindDir3pm)) %>%
na.omit() %>%
filter(Location == "Sydney") %>%
dplyr::select(-c(Location))
weather_cleaned_melbourne <- weather %>%
dplyr::select(-c(WindGustDir, WindDir9am, WindDir3pm)) %>%
na.omit() %>%
filter(Location == "Melbourne") %>%
dplyr::select(-c(Location))
# BIC plot Sydney
# all_sydney <- regsubsets(RainTomorrow ~ ., data = weather_cleaned_sydney, method = "exhaustive")
# plot(all_sydney, scale = "bic")
# summary(all_sydney)
rain_tomorrow_sydney_model <- glm(RainTomorrow ~ MinTemp + MaxTemp + Sunshine + WindGustSpeed + Humidity3pm + RainToday, data = weather_cleaned_sydney)
# Linearity odds plot Sydney
emplogitplot1(RainTomorrow ~ Sunshine + MinTemp + MaxTemp + WindGustSpeed + Humidity3pm + RainToday, data = weather_cleaned_sydney, ngroups = "all")
# cor(weather_cleaned_sydney)
# BIC plot Melbourne
# all_melbourne <- regsubsets(RainTomorrow ~ ., data = weather_cleaned_melbourne, method = "exhaustive")
# plot(all_melbourne, scale = "bic")
# summary(all_melbourne)
rain_tomorrow_melbourne_model <- glm(RainTomorrow ~ MinTemp + MaxTemp + Sunshine + WindGustSpeed + Humidity3pm + RainToday, data = weather_cleaned_melbourne)
# Linearity odds plot Melbourne
emplogitplot1(RainTomorrow ~ Sunshine + MinTemp + MaxTemp + WindGustSpeed + Humidity3pm + RainToday, data = weather_cleaned_melbourne, ngroups = "all")
# cor(weather_cleaned_melbourne)
# Brier scores
pred_prob <- predict(rain_tomorrow_sydney_model)
brier_score <- mean((pred_prob - weather_cleaned_sydney$RainTomorrow)^2)
print(paste("Brier score for Sydney:", brier_score))
pred_prob <- predict(rain_tomorrow_melbourne_model)
brier_score <- mean((pred_prob - weather_cleaned_melbourne$RainTomorrow)^2)
print(paste("Brier score for Mebourne:", brier_score))
# Brier Score
prediction <- predict(lr_model, clean_weather, type = "response")
BriarScore <- mean((prediction - clean_weather$RainTomorrow)^2)
# Odds Ratio
pi <- exp(-1.720027 + 1.576018) / (1 + exp(-1.720027 + 1.576018))
odds <- pi / (1 - pi)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
library(HH)
knitr::opts_chunk$set(echo = F)
# weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
weather <- read.csv("/Users/tgr/Downloads/weatherAUS.csv", header = TRUE)
# weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
weather <- read.csv("./weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# clean data
clean_weather <- weather %>% na.omit()
# model
lr_model <- glm(RainTomorrow ~ RainToday, family = binomial(link = "logit"), data = clean_weather)
ggplot(clean_weather, aes(x = RainToday, fill = RainTomorrow)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Proportion of Rain Tomorrow by Rain Today")
mosaic(~ RainToday + RainTomorrow, data = clean_weather, shade = TRUE, legend = TRUE)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
library(HH)
knitr::opts_chunk$set(echo = F)
# weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
weather <- read.csv("./weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# clean data
clean_weather <- weather %>% na.omit()
# model
lr_model <- glm(RainTomorrow ~ RainToday, family = binomial(link = "logit"), data = clean_weather)
ggplot(clean_weather, aes(x = RainToday, fill = RainTomorrow)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Proportion of Rain Tomorrow by Rain Today")
mosaic(~ RainToday + RainTomorrow, data = clean_weather, shade = TRUE, legend = TRUE)
summary(lr_model)
# Brier scores
print(paste("Brier score:", compute_brier(clean_weather$RainTomorrow, predict(lr_model, clean_weather, type = "response"))))
pi_rainToday <- exp(-1.720027 + 1.576018) / (1 + exp(-1.720027 + 1.576018))
odds_rainToday <- pi_rainToday / (1 - pi_rainToday)
pi_not_rainToday <- exp(-1.720027 + 1.576018) / (1 + exp(-1.720027 + 1.576018))
odds_rainToday <- pi_not_rainToday / (1 - pi_not_rainToday)
print(paste("Odds Ratio:", odds_rainToday / odds_not_rainToday))
# Brier scores
print(paste("Brier score:", compute_brier(clean_weather$RainTomorrow, predict(lr_model, clean_weather, type = "response"))))
pi_rainToday <- exp(-1.720027 + 1.576018) / (1 + exp(-1.720027 + 1.576018))
odds_rainToday <- pi_rainToday / (1 - pi_rainToday)
pi_not_rainToday <- exp(-1.720027) / (1 + exp(-1.720027))
odds_not_rainToday <- pi_not_rainToday / (1 - pi_not_rainToday)
print(paste("Odds Ratio:", odds_rainToday / odds_not_rainToday))
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
library(HH)
knitr::opts_chunk$set(echo = F)
install.packages(mosaic)
install.packages("mosaic")
install.packages("mosaic")
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
library(HH)
knitr::opts_chunk$set(echo = F)
# weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
weather <- read.csv("./weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# clean data
clean_weather <- weather %>% na.omit()
# model
lr_model <- glm(RainTomorrow ~ RainToday, family = binomial(link = "logit"), data = clean_weather)
ggplot(clean_weather, aes(x = RainToday, fill = RainTomorrow)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Proportion of Rain Tomorrow by Rain Today")
mosaic(~ RainToday + RainTomorrow, data = clean_weather, shade = TRUE, legend = TRUE)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
library(HH)
knitr::opts_chunk$set(echo = F)
# weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
weather <- read.csv("./weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
View(weather)
# front-matter
rm(list = ls()) # clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(scales)
library(leaps)
library(dplyr)
library(HH)
library(vcdExtra)
knitr::opts_chunk$set(echo = F)
# weather <- read.csv("/Users/nathanhowland/Documents/324_Final_Project/weatherAUS.csv", header = TRUE)
weather <- read.csv("./weatherAUS.csv", header = TRUE)
compute_brier <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# clean data
clean_weather <- weather %>% na.omit()
# model
lr_model <- glm(RainTomorrow ~ RainToday, family = binomial(link = "logit"), data = clean_weather)
log_odds_predict <- data.frame(predict(lr_model, type = "link"))
ggplot(clean_weather, aes(x = RainToday, y = log_odds_predict)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(title = "Log-Odds Plot", x = "Predictor", y = "Log-Odds")
